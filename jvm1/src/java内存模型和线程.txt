java内存模型和线程

1.概述
    TPS：每秒处理相应的请求数量，与并发有很强的关系
    内存模型：可以理解为在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。

    硬件效率和一致性:
            为了使得处理器内部的运算单元能尽量被充分利用，处理器可
        能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序
        执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算
        的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务
        的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。与处理器的乱序执行优化类
        似，Java虚拟机的即时编译器中也有类似的指令重排序（Instruction Reorder）优化。

2.Java内存模型:
        Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model,JMM）来屏蔽掉各
    种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访
    问效果。

    主要目标:
            定义程序中各个变量的访问规则，即在虚拟机中将变量存储
        到内存和从内存中取出变量这样的底层细节。此处的变量（Variables）与Java编程中所说的
        变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与
        方法参数，因为后者是线程私有的[3]，不会被共享，自然就不会存在竞争问题。

            Java内存模型规定了所有的变量都存储在主内存（Main Memory）中。每条线程还有自己的工作内存。
        线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的
        所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量，不同的线程之间也无法直接访问对方工
        作内存中的变量，线程间变量值的传递均需要通过主内存来完成。

        java线程 <---> 工作内存   <-->    Save
                                          &
        java线程 <---> 工作内存   <-->    Load  <-->  主内存
                                         操作
        java线程 <---> 工作内存   <-->


    内存间交互操作:
            关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，
        Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。

        lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。

        unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。

        read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。

        load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。

        use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码
            指令时将会执行这个操作。

        assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码
            指令时执行这个操作。

        store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。

        write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。


            如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地
        执行store和write操作。注意，Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之
        间、store与write之间是可插入其他指令的。如对主内存中的变量a、b进行访问时，一种可能
        出现顺序是read a、read b、load b、load a。除此之外，Java内存模型还规定了在执行上述8种
        基本操作时必须满足如下规则：
        <1>.不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了
            但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。
        <2>.不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该
            变化同步回主内存。
        <3>.不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。
        <4>.一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，
            就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。
        <5>.一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线
            程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。
        <6>.如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作
            初始化变量的值。
        <7>.如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去
            unlock一个被其他线程锁定住的变量。
        <8>.对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。
3.volatile
       当一个变量定义为volatile之后，它将具备两种特性:
    <1>第一是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个
    变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量的值在线程间传递均需要通过主内存来
    完成，例如，线程A修改一个普通变量的值，然后向主内存进行回写，另外一条线程B在线程A回写完成了之后再从主内存进行读取操作，新变量值
    才会对线程B可见。

       volatile变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但由于每
    次使用之前都要先刷新，执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是Java里面的运算并非
    原子操作，导致volatile变量的运算在并发下一样是不安全的，我们可以通过一段简单的演示来说明原因，
    (例子t12)
        这段代码发起了20个线程，每个线程对race变量进行2000次自增操作，如果这段代码能够正确并发的话，最后输出的结果应该是40000。
    并不会获得期望的结果，而且会发现每次运行程序，输出的结果都不一样，都是一个小于40000的数字.

        由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized或java.util.
    concurrent中的原子类）来保证原子性。运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。
    变量不需要与其他的状态变量共同参与不变约束。

    <2>volatile变量的第二个语义是禁止指令重排序优化，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确
     的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。

                从硬件架构上讲，指令重排序是指CPU采用了允许将多
                条指令不按程序规定的顺序分开发送给各相应电路单元处理。但并不是说指令任意重
                排，CPU需要能正确处理指令依赖情况以保障程序能得出正确的执行结果。譬如指令1把地
                址A中的值加10，指令2把地址A中的值乘以2，指令3把地址B中的值减去3，这时指令1和指
                令2是有依赖的，它们之间的顺序不能重排——（A+10）*2与A*2+10显然不相等，但指令3
                可以重排到指令1、2之前或者中间，只要保证CPU执行后面依赖到A、B值的操作时能获取到
                正确的A和B值即可。

     volatile和锁的同步性能比较:
        在某些情况下，volatile的同步机制的性能确实要优于锁（使用synchronized关键字或java.util.concurrent包里面的锁），但是由于虚
     拟机对锁实行的许多消除和优化，使得我们很难量化地认为volatile就会比synchronized快多少。如果让volatile自己与自己比较，那可以确
     定一个原则：volatile变量读操作的性能消耗与普通变量几乎没有什么差别，但是写操作则可能会慢一些，因为它需要在本地代码中插入许
     多内存屏障指令来保证处理器不发生乱序执行。不过即便如此，大多数场景下volatile的总开销仍然要比锁低，我们在volatile与锁之中选择
     的唯一依据仅仅是volatile的语义能否满足使用场景的需求。

     volatile中内存模型的保证:
     a.要求在工作内存中，每次使用V前都必须先从主内存刷新最新值，用于保证能看见其他线程对变量V所做的修改后的值
     b.要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改
     c.这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码的执行顺序与程序的顺序相同



4.关于long和double变量的特殊规则（long和double的非原子化协定）
        Java内存模型要求lock、unlock、read、load、assign、use、store、write这8个操作都具有原子性，但是对于64位的数据类型（long
    和double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进
    行，即允许虚拟机实现选择可以不保证64位数据类型的load、store、read和write这4个操作的原子性，这点就是所谓的long和double的非原
    子性协定。
        如果有多个线程共享一个并未声明为volatile的long或double类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读
    取到一个既非原值，也不是其他线程修改值的代表了“半个变量”的数值。
        目前各种平台下的商用虚拟机几乎都选择把64位数据的读写操作作为原子操作来对待，
        因此我们在编写代码时一般不需要把用到的long和double变量专门声明为volatile。

5.原子性，可见性和有序性
    原子性:
        由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读
    写是具备原子性的.synchronized块之间的操作也具备原子性。

    可见性：
        可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。除了volatile之外，Java还有两个关键字能实现可见性，
    即synchronized和final。

    有序性：
        Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的
    操作都是无序的。前半句是指“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics），后半句是指“指令重排序”现象
    和“工作内存与主内存同步延迟”现象。
        Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语
    义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则决定了持有同一个锁的两个同
    步块只能串行地进入。


6.先行发生原则
        先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产
    生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。

    Java内存模型下一些“天然的”先行发生关系:
        <1>.程序次序规则（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。
        准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。
        <2>.管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，
        而“后面”是指时间上的先后顺序。
        <3>.volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，
        这里的“后面”同样是指时间上的先后顺序。
        <4>.线程启动规则（Thread Start Rule）：Thread对象的start（）方法先行发生于此线程的每一个动作。
        <5>.线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join（）
        方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。
        <6>.线程中断规则（Thread Interruption Rule）：对线程interrupt（）方法的调用先行发生于被中断线程的代码检测到中断事件
        的发生，可以通过Thread.interrupted（）方法检测到是否有中断发生。
        <7>.对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize（）方法的开始。
        <8>.传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。


        ****时间先后顺序与先行发生原则之间基本没有太大的关系，所以我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发
        生原则为准