Java自动装箱和拆箱
    自动装箱和拆箱从Java 1.5开始引入，目的是将原始类型值转自动地转换成对应的对象。自动装箱与拆箱的机制可以让我们在Java的变量赋值或
者是方法调用等情况下使用原始类型或者对象类型更加简单直接。

    自动装箱就是Java自动将原始类型值转换成对应的对象，比如将int的变量转换成Integer对象，这个过程叫做装箱，反之将Integer对象转换成
int类型值，这个过程叫做拆箱。因为这里的装箱和拆箱是自动进行的非人为转换，所以就称作为自动装箱和拆箱。原始类型byte,short,char,int,
long,float,double和boolean对应的封装类为Byte,Short,Character,Integer,Long,Float,Double,Boolean。

要点：
    自动装箱时调用ValueOf()方法将原始类型转换成对象，拆箱时候调用intValue(),doubleValue()这一类方法将对象转换成原始类型

发生时机：
    比如我们有一个方法，接受一个对象类型的参数，如果我们传递一个原始类型值，那么Java会自动讲这个原始类型值转换成与之对应的对象。最
    经典的一个场景就是当我们向ArrayList这样的容器中增加原始类型数据时或者是创建一个参数化的类，比如下面的ThreadLocal。

    ArrayList<Integer> list1 = new ArrayList<Integer>();
    list1.add(1);//autoboxing

    list1.get(0);//unboxing

    ThreadLocal<Integer> local1 = new ThreadLocal<Integer>();

    local1.set(4);//autoboxing;
    local1.get();//unboxing

    赋值时
    这是最常见的一种情况，在Java 1.5以前我们需要手动地进行转换才行，而现在所有的转换都是由编译器来完成。
    //before autoboxing
    Integer iObject = Integer.valueOf(3);
    Int iPrimitive = iObject.intValue()

    //after java5
    Integer iObject = 3; //autobxing - primitive to wrapper conversion
    int iPrimitive = iObject; //unboxing - object to primitive conversion
    方法调用时
    这是另一个常用的情况，当我们在方法调用时，我们可以传入原始数据值或者对象，同样编译器会帮我们进行转换。
    public static Integer show(Integer iParam){
       System.out.println("autoboxing example - method invocation i: " + iParam);
       return iParam;
    }

    //autoboxing and unboxing in method invocation
    show(3); //autoboxing
    int result = show(3); //unboxing because return type of method is Integer

自动装箱的弊端：
    会创建多余的对象，影响系统的性能：
    Integer num = 0;
    for(int i = 0; i < 4000; i ++){
        num += i;
    }
    //这样的使用会在每一次对i进行加和操作的时候进行自动装箱，将i转换成了对象然后进行对象的加法，之后弃用该对象，影响了系统的性能。

重载和自动装箱：
    当按照原始类型和包装类型分别对方法进行了重载的时候，不会调用自动装箱，例如：
        public void test(int x) {
            System.out.println("int test is used");
        }

        public void test(Integer x){
            System.out.println("Integer test is used");
        }

        public static void main(String[] args){
            int x = 1;
            test(x);
            //int test is used,no autoboxing

            Integer x1 = 3;//autoboxing;
            test(x1);
            //Integer test is used,no unboxing;

        }




    ***当包装类对象进行比较时比较的是对象而不是数值：
        public class AutoboxingTest {

            public static void main(String args[]) {

                // Example 1: == comparison pure primitive – no autoboxing
                int i1 = 1;
                int i2 = 1;
                System.out.println("i1==i2 : " + (i1 == i2)); // true

                // Example 2: equality operator mixing object and primitive
                Integer num1 = 1; // autoboxing
                int num2 = 1;
                System.out.println("num1 == num2 : " + (num1 == num2)); // true

                // Example 3: special case - arises due to autoboxing in Java
                Integer obj1 = 1; // autoboxing will call Integer.valueOf()
                Integer obj2 = 1; // same call to Integer.valueOf() will return same
                                    // cached Object

                System.out.println("obj1 == obj2 : " + (obj1 == obj2)); // true

                // Example 4: equality operator - pure object comparison
                Integer one = new Integer(1); // no autoboxing
                Integer anotherOne = new Integer(1);
                System.out.println("one == anotherOne : " + (one == anotherOne)); // false

            }

        }

        Output:
        i1==i2 : true
        num1 == num2 : true
        obj1 == obj2 : true
        one == anotherOne : false


        