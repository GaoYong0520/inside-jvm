java内存模型和线程

1.概述
    TPS：每秒处理相应的请求数量，与并发有很强的关系
    内存模型：可以理解为在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。

    硬件效率和一致性:
            为了使得处理器内部的运算单元能尽量被充分利用，处理器可
        能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序
        执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算
        的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务
        的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。与处理器的乱序执行优化类
        似，Java虚拟机的即时编译器中也有类似的指令重排序（Instruction Reorder）优化。

2.Java内存模型:
        Java虚拟机规范中试图定义一种Java内存模型[1]（Java Memory Model,JMM）来屏蔽掉各
    种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访
    问效果。

    主要目标:
            定义程序中各个变量的访问规则，即在虚拟机中将变量存储
        到内存和从内存中取出变量这样的底层细节。此处的变量（Variables）与Java编程中所说的
        变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与
        方法参数，因为后者是线程私有的[3]，不会被共享，自然就不会存在竞争问题。

            Java内存模型规定了所有的变量都存储在主内存（Main Memory）中。每条线程还有自己的工作内存。
        线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的
        所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量，不同的线程之间也无法直接访问对方工
        作内存中的变量，线程间变量值的传递均需要通过主内存来完成。

        java线程 <---> 工作内存   <-->    Save
                                          &
        java线程 <---> 工作内存   <-->    Load  <-->  主内存
                                         操作
        java线程 <---> 工作内存   <-->


    内存间交互操作:
            关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，
        Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。

        lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。

        unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。

        read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。

        load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。

        use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码
            指令时将会执行这个操作。

        assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码
            指令时执行这个操作。

        store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。

        write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。


            如果要把一个变量从主内存复制到工作内存，那就要顺序地执行read和load操作，如果要把变量从工作内存同步回主内存，就要顺序地
        执行store和write操作。注意，Java内存模型只要求上述两个操作必须按顺序执行，而没有保证是连续执行。也就是说，read与load之
        间、store与write之间是可插入其他指令的。如对主内存中的变量a、b进行访问时，一种可能
        出现顺序是read a、read b、load b、load a。除此之外，Java内存模型还规定了在执行上述8种
        基本操作时必须满足如下规则：
        <1>.不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了
            但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。
        <2>.不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该
            变化同步回主内存。
        <3>.不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。
        <4>.一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，
            就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。
        <5>.一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线
            程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。
        <6>.如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作
            初始化变量的值。
        <7>.如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去
            unlock一个被其他线程锁定住的变量。
        <8>.对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。
3.volatile
       当一个变量定义为volatile之后，它将具备两种特性，第一是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个
    变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量的值在线程间传递均需要通过主内存来
    完成，例如，线程A修改一个普通变量的值，然后向主内存进行回写，另外一条线程B在线程A回写完成了之后再从主内存进行读取操作，新变量值
    才会对线程B可见。

       volatile变量在各个线程的工作内存中不存在一致性问题（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但由于每
    次使用之前都要先刷新，执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是Java里面的运算并非
    原子操作，导致volatile变量的运算在并发下一样是不安全的，我们可以通过一段简单的演示来说明原因，
