##1.线程安全


> “当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交
  替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象
  的行为都可以获得正确的结果，那这个对象是线程安全的”


  
### java中线程安全

线程安全，就限定于多个线
程之间存在共享数据访问这个前提，因为如果一段代码根本不会与其他线程共享数据，那么
从线程安全的角度来看，程序是串行执行还是多线程执行对它来说是完全没有区别的。


按照线程安全的“安全程度”由强至弱来排序，我们[1]可以将Java语言中各种
操作共享的数据分为以下5类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对
立。


1. 不可变

    
在Java语言中，不可变（Immutable）的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需
要再采取任何的线程安全保障措施，在第12章我们谈到final关键字带来的可见性时曾经提到过这一点，只要一个不可变的对象被正确地构建出来
（没有发生this引用逃逸的情况），那其外部的可见状态永远也不会改变，永远也不会看到它在多个线程之中处于不一致的状态。
“不可变”带来的安全性是最简单和最纯粹的。

在Java API中符合不可变要求的类型，除了上面提到的String之外，常用的还有枚举类
型，以及java.lang.Number的部分子类，如Long和Double等数值包装类型，BigInteger和
BigDecimal等大数据类型。


2. 绝对线程安全


一个类要达到“不管运行时环境如何，调用者都不需要任何额外的同步措施”通常需要付
出很大的，甚至有时候是不切实际的代价。在Java API中标注自己是线程安全的类，大多数
都不是绝对的线程安全。

如果说java.util.Vector是一个线程安全的容器，相信所有的Java程序员对此都不会有异
议，因为它的add（）、get（）和size（）这类方法都是被synchronized修饰的，尽管这样效
率很低，但确实是安全的。但是，即使它所有的方法都被修饰成同步，也不意味着调用它的
时候永远都不再需要同步手段了，请看一下代码


```
    private static Vector＜Integer＞vector=new Vector＜Integer＞（）；
    public static void main（String[]args）{
    while（true）{
    for（int i=0；i＜10；i++）{
    vector.add（i）；
    }
    Thread removeThread=new Thread（new Runnable（）{
    @Override
    public void run（）{
    for（int i=0；i＜vector.size（）；i++）{
    vector.remove（i）；
    }
    }
    }）；
    Thread printThread=new Thread（new Runnable（）{
    @Override
    public void run（）{
    for（int i=0；i＜vector.size（）；i++）{
    System.out.println（（vector.get（i）））；
    }
    }
    }）；
    removeThread.start（）；
    printThread.start（）；
    //不要同时产生过多的线程，否则会导致操作系统假死
    while（Thread.activeCount（）＞20）；
    }
    }
```

很明显，尽管这里使用到的Vector的get（）、remove（）和size（）方法都是同步的，
但是在多线程的环境中，如果不在方法调用端做额外的同步措施的话，使用这段代码仍然是
不安全的，因为如果另一个线程恰好在错误的时间里删除了一个元素，导致序号i已经不再
可用的话，再用i访问数组就会抛出一个ArrayIndexOutOfBoundsException。如果要保证这段代
码能正确执行下去，我们不得不把removeThread和printThread的定义改成如：


```
    Thread removeThread=new Thread（new Runnable（）{
    @Override
    public void run（）{
    synchronized（vector）{
    for（int i=0；i＜vector.size（）；i++）{
    vector.remove（i）；
    }
    }
    }
    }）；
    Thread printThread=new Thread（new Runnable（）{
    @Override
    public void run（）{
    synchronized（vector）{
    for（int i=0；i＜vector.size（）；i++）{
    System.out.println（（vector.get（i）））；
    }
    }
    }
    }）；
```


3. 相对线程安全


相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操
作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连
续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。

在Java语言中，大部分的线程安全类都属于这种类型，例如Vector、HashTable、
Collections的synchronizedCollection（）方法包装的集合等。


4. 线程兼容


线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段
来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时
候指的是这一种情况。Java API中大部分的类都是属于线程兼容的，如与前面的Vector和
HashTable相对应的集合类ArrayList和HashMap等。


5. 线程对立


线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代
码。由于Java语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，
而且通常都是有害的，应当尽量避免。


##2.线程安全的实现方法